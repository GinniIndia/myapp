package docs

// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
  "swagger": "2.0",
  "info": {
    "description": "In this Project work we can store any country's state wise Active Covid Cases in Mongo Db, and using GPS coordiantes retries Active cases of respective region.",
    "version": "1.0.0",
    "title": "Covid Info",
    "contact": {
      "email": "gargginni01@gmail.com"
    }
  },
  "host": "localhost:8185",
  "basePath": "/v1",
  "schemes": [
    "http"
  ],
  "paths": {
    "/get_covid_patients_count_for_region": {
      "get": {
        "summary": "Find the Active Patient count in respective State of Input GPS Co-ordinates",
        "description": "Returns info - Region Code, Active Covid Patients and TimeStamp",
        "operationId": "getPatientsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude of Region for which we have to retrieve Active Covid Patient Count",
            "required": true,
            "type": "string",
            "format": "float64"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude of Region for which we have to retrieve Active Covid Patient Count",
            "required": true,
            "type": "string",
            "format": "float64"
          }
        ],
        "responses": {
          "200": {
            "description": "Return Json information with following key value pairs -- {state : HR, patient_count : 135.000000, date_time : 2022-03-24 18:49:48.8928037 +0530 IST m=+17.025918401}"
          },
          "400": {
            "description": "Invalid Input Parameters"
          },
          "404": {
            "description": "Region Information not Found in DB"
          }
        }
      }
    },
    "/fetch_and_store_covid_data": {
      "get": {
        "summary": "This api is used to store the Active Covid Cases Count State wise in Mongo DB",
        "description": "Returns info msg - Covid Info Stored SuccessFully!!",
        "operationId": "fetchAndStoreCovidData",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Covid Info Stored SuccessFully!!"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "This api is used to check health of Server and APP",
        "description": "Returns info msg - Server is up and running",
        "operationId": "healthCheck",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Server is up and running"
          }
        }
      }
    }
  },
  "definitions": {
    "Covid": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "bson.ObjectId"
        },
        "State": {
          "type": "string"
        },
        "PatientCount": {
          "type": "integer",
          "format": "float64"
        },
        "Date": {
          "type": "string"
        }
      }
    },
    "CovidDao": {
      "type": "object",
      "properties": {
        "Server": {
          "type": "string"
        },
        "Database": {
          "type": "string"
        }
      }
    }
  }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:3000",
	BasePath:    "/",
	Schemes:     []string{"http"},
	Title:       "Echo Swagger Example API",
	Description: "This is a sample server server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}